// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: chat/v1/chat.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chat_GetOnlineUserIds_FullMethodName = "/chat.Chat/GetOnlineUserIds"
	Chat_GetConnInfo_FullMethodName      = "/chat.Chat/GetConnInfo"
	Chat_SendUserMessage_FullMethodName  = "/chat.Chat/SendUserMessage"
	Chat_SendAdminMessage_FullMethodName = "/chat.Chat/SendAdminMessage"
	Chat_NoticeRead_FullMethodName       = "/chat.Chat/NoticeRead"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	GetOnlineUserIds(ctx context.Context, in *GetOnlineUserIdsRequest, opts ...grpc.CallOption) (*GetOnlineUserIdsReply, error)
	GetConnInfo(ctx context.Context, in *GetConnInfoRequest, opts ...grpc.CallOption) (*GetConnInfoReply, error)
	SendUserMessage(ctx context.Context, in *SendUserMessageRequest, opts ...grpc.CallOption) (*SendUserMessageReply, error)
	SendAdminMessage(ctx context.Context, in *SendAdminMessageRequest, opts ...grpc.CallOption) (*SendAdminMessageReply, error)
	NoticeRead(ctx context.Context, in *NoticeReadRequest, opts ...grpc.CallOption) (*NoticeReadReply, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) GetOnlineUserIds(ctx context.Context, in *GetOnlineUserIdsRequest, opts ...grpc.CallOption) (*GetOnlineUserIdsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnlineUserIdsReply)
	err := c.cc.Invoke(ctx, Chat_GetOnlineUserIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetConnInfo(ctx context.Context, in *GetConnInfoRequest, opts ...grpc.CallOption) (*GetConnInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnInfoReply)
	err := c.cc.Invoke(ctx, Chat_GetConnInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendUserMessage(ctx context.Context, in *SendUserMessageRequest, opts ...grpc.CallOption) (*SendUserMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendUserMessageReply)
	err := c.cc.Invoke(ctx, Chat_SendUserMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendAdminMessage(ctx context.Context, in *SendAdminMessageRequest, opts ...grpc.CallOption) (*SendAdminMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendAdminMessageReply)
	err := c.cc.Invoke(ctx, Chat_SendAdminMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) NoticeRead(ctx context.Context, in *NoticeReadRequest, opts ...grpc.CallOption) (*NoticeReadReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoticeReadReply)
	err := c.cc.Invoke(ctx, Chat_NoticeRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility.
type ChatServer interface {
	GetOnlineUserIds(context.Context, *GetOnlineUserIdsRequest) (*GetOnlineUserIdsReply, error)
	GetConnInfo(context.Context, *GetConnInfoRequest) (*GetConnInfoReply, error)
	SendUserMessage(context.Context, *SendUserMessageRequest) (*SendUserMessageReply, error)
	SendAdminMessage(context.Context, *SendAdminMessageRequest) (*SendAdminMessageReply, error)
	NoticeRead(context.Context, *NoticeReadRequest) (*NoticeReadReply, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServer struct{}

func (UnimplementedChatServer) GetOnlineUserIds(context.Context, *GetOnlineUserIdsRequest) (*GetOnlineUserIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineUserIds not implemented")
}
func (UnimplementedChatServer) GetConnInfo(context.Context, *GetConnInfoRequest) (*GetConnInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnInfo not implemented")
}
func (UnimplementedChatServer) SendUserMessage(context.Context, *SendUserMessageRequest) (*SendUserMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserMessage not implemented")
}
func (UnimplementedChatServer) SendAdminMessage(context.Context, *SendAdminMessageRequest) (*SendAdminMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAdminMessage not implemented")
}
func (UnimplementedChatServer) NoticeRead(context.Context, *NoticeReadRequest) (*NoticeReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeRead not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}
func (UnimplementedChatServer) testEmbeddedByValue()              {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	// If the following call pancis, it indicates UnimplementedChatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_GetOnlineUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnlineUserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetOnlineUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetOnlineUserIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetOnlineUserIds(ctx, req.(*GetOnlineUserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetConnInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetConnInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetConnInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetConnInfo(ctx, req.(*GetConnInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SendUserMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendUserMessage(ctx, req.(*SendUserMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendAdminMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAdminMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendAdminMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SendAdminMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendAdminMessage(ctx, req.(*SendAdminMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_NoticeRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).NoticeRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_NoticeRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).NoticeRead(ctx, req.(*NoticeReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOnlineUserIds",
			Handler:    _Chat_GetOnlineUserIds_Handler,
		},
		{
			MethodName: "GetConnInfo",
			Handler:    _Chat_GetConnInfo_Handler,
		},
		{
			MethodName: "SendUserMessage",
			Handler:    _Chat_SendUserMessage_Handler,
		},
		{
			MethodName: "SendAdminMessage",
			Handler:    _Chat_SendAdminMessage_Handler,
		},
		{
			MethodName: "NoticeRead",
			Handler:    _Chat_NoticeRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/v1/chat.proto",
}
