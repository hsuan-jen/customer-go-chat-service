// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CustomerAdminsDao is the data access object for table customer_admins.
type CustomerAdminsDao struct {
	table   string                // table is the underlying table name of the DAO.
	group   string                // group is the database configuration group name of current DAO.
	columns CustomerAdminsColumns // columns contains all the column names of Table for convenient usage.
}

// CustomerAdminsColumns defines and stores column names for table customer_admins.
type CustomerAdminsColumns struct {
	Id               string //
	CustomerId       string // 客户ID
	Username         string // 用户名
	Password         string // 密码
	Phone            string // 手机号码
	Email            string // 邮箱
	IsSuper          string // 是否超级管理员
	IsReset          string // 是否重置过密码(0 否 1 是)
	Status           string // 状态
	ApiToken         string // 登陆token
	ExpireTime       string // token过期时间
	LastLoginAt      string // 最后登陆时间
	CreatedAt        string //
	UpdatedAt        string //
	DeletedAt        string // 删除时间
	Gates            string //
	Avatar           string // 头像
	Name             string // 真实姓名
	IsChat           string // 是否有客服权限
	IsOfficialNotice string // 公众号通知
}

//  customerAdminsColumns holds the columns for table customer_admins.
var customerAdminsColumns = CustomerAdminsColumns{
	Id:               "id",
	CustomerId:       "customer_id",
	Username:         "username",
	Password:         "password",
	Phone:            "phone",
	Email:            "email",
	IsSuper:          "is_super",
	IsReset:          "is_reset",
	Status:           "status",
	ApiToken:         "api_token",
	ExpireTime:       "expire_time",
	LastLoginAt:      "last_login_at",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
	Gates:            "gates",
	Avatar:           "avatar",
	Name:             "name",
	IsChat:           "is_chat",
	IsOfficialNotice: "is_official_notice",
}

// NewCustomerAdminsDao creates and returns a new DAO object for table data access.
func NewCustomerAdminsDao() *CustomerAdminsDao {
	return &CustomerAdminsDao{
		group:   "default",
		table:   "customer_admins",
		columns: customerAdminsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CustomerAdminsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CustomerAdminsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CustomerAdminsDao) Columns() CustomerAdminsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CustomerAdminsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CustomerAdminsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CustomerAdminsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
