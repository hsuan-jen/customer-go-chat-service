// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CustomersDao is the data access object for table customers.
type CustomersDao struct {
	table   string           // table is the underlying table name of the DAO.
	group   string           // group is the database configuration group name of current DAO.
	columns CustomersColumns // columns contains all the column names of Table for convenient usage.
}

// CustomersColumns defines and stores column names for table customers.
type CustomersColumns struct {
	Id                             string //
	Name                           string // 名称
	Abbreviation                   string // 标识
	ContactName                    string // 联系人姓名
	ContactPhone                   string // 联系人电话
	DetailAddress                  string // 详细地址
	Province                       string // 省
	City                           string // 市
	Country                        string // 区域/乡镇
	Remark                         string // 备注
	Status                         string // 状态：10启用，20禁用
	CreatedAt                      string //
	UpdatedAt                      string //
	EnterpriseBusinessLicense      string // 企业营业执照
	OrganizationCodeCertificate    string // 组织机构代码证
	TaxRegistrationCertificate     string // 税务登记证
	CombinationOfThreeCertificates string // 三证合一
	ExpiryDate                     string // 续约到期时间
	RenewalStatus                  string // 续约状态 0:已到期 10:未续约 20:续约中 30:取消续约 40: 终止续约
	FoodBusinessLicense            string // 食品经营许可证
	LegalPersonCertificate         string // 法人证件
}

//  customersColumns holds the columns for table customers.
var customersColumns = CustomersColumns{
	Id:                             "id",
	Name:                           "name",
	CreatedAt:                      "created_at",
	UpdatedAt:                      "updated_at",
}

// NewCustomersDao creates and returns a new DAO object for table data access.
func NewCustomersDao() *CustomersDao {
	return &CustomersDao{
		group:   "default",
		table:   "customers",
		columns: customersColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CustomersDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CustomersDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CustomersDao) Columns() CustomersColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CustomersDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CustomersDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CustomersDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
