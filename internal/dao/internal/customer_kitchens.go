// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CustomerKitchensDao is the data access object for table customer_kitchens.
type CustomerKitchensDao struct {
	table   string                  // table is the underlying table name of the DAO.
	group   string                  // group is the database configuration group name of current DAO.
	columns CustomerKitchensColumns // columns contains all the column names of Table for convenient usage.
}

// CustomerKitchensColumns defines and stores column names for table customer_kitchens.
type CustomerKitchensColumns struct {
	Id         string //
	CustomerId string //
	Name       string // 名称
	Address    string // 详细地址
	Province   string //
	City       string //
	Country    string //
	Longitude  string // 经度
	Latitude   string // 维度
	CreatedAt  string //
	UpdatedAt  string //
}

//  customerKitchensColumns holds the columns for table customer_kitchens.
var customerKitchensColumns = CustomerKitchensColumns{
	Id:         "id",
	CustomerId: "customer_id",
	Name:       "name",
	Address:    "address",
	Province:   "province",
	City:       "city",
	Country:    "country",
	Longitude:  "longitude",
	Latitude:   "latitude",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// NewCustomerKitchensDao creates and returns a new DAO object for table data access.
func NewCustomerKitchensDao() *CustomerKitchensDao {
	return &CustomerKitchensDao{
		group:   "default",
		table:   "customer_kitchens",
		columns: customerKitchensColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CustomerKitchensDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CustomerKitchensDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CustomerKitchensDao) Columns() CustomerKitchensColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CustomerKitchensDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CustomerKitchensDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CustomerKitchensDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
