// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// MealOrdersDao is the data access object for table meal_orders.
type MealOrdersDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns MealOrdersColumns // columns contains all the column names of Table for convenient usage.
}

// MealOrdersColumns defines and stores column names for table meal_orders.
type MealOrdersColumns struct {
	Id                   string //
	CustomerId           string //
	UserId               string // 用户id
	StudentId            string // 学生id
	MealId               string // 套餐id
	TermId               string // 学期id
	SchoolId             string // 学校id
	StudentTermBalanceId string //
	DispatchDate         string // 配送日期
	DispatchGradeId      string // 配送年纪
	DispatchClassId      string // 配送班级
	StudentName          string // 学生姓名
	Status               string // 状态(10:已提交,20:准备中;30:已完成;40:已取消)
	PayPrice             string // 支付金额
	PayType              string //
	IsBackend            string // 是否后台添加订单
	IsAuto               string // 是否自动产生订单
	CreatedAt            string // 下单时间
	UpdatedAt            string //
	PreparedAt           string // 准备时间
	FinishedAt           string // 完成时间
	CancelAt             string // 取消时间
	CancelReason         string // 取消理由
	IsCanceledByUser     string // 是否为用户取消
	OrderTypeId          string // 类型id
	GiftPay              string // 赠送金额支付
}

//  mealOrdersColumns holds the columns for table meal_orders.
var mealOrdersColumns = MealOrdersColumns{
	Id:                   "id",
	CustomerId:           "customer_id",
	UserId:               "user_id",
	StudentId:            "student_id",
	MealId:               "meal_id",
	TermId:               "term_id",
	SchoolId:             "school_id",
	StudentTermBalanceId: "student_term_balance_id",
	DispatchDate:         "dispatch_date",
	DispatchGradeId:      "dispatch_grade_id",
	DispatchClassId:      "dispatch_class_id",
	StudentName:          "student_name",
	Status:               "status",
	PayPrice:             "pay_price",
	PayType:              "pay_type",
	IsBackend:            "is_backend",
	IsAuto:               "is_auto",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	PreparedAt:           "prepared_at",
	FinishedAt:           "finished_at",
	CancelAt:             "cancel_at",
	CancelReason:         "cancel_reason",
	IsCanceledByUser:     "is_canceled_by_user",
	OrderTypeId:          "order_type_id",
	GiftPay:              "gift_pay",
}

// NewMealOrdersDao creates and returns a new DAO object for table data access.
func NewMealOrdersDao() *MealOrdersDao {
	return &MealOrdersDao{
		group:   "default",
		table:   "meal_orders",
		columns: mealOrdersColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *MealOrdersDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *MealOrdersDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *MealOrdersDao) Columns() MealOrdersColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *MealOrdersDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *MealOrdersDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *MealOrdersDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
