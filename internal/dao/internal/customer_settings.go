// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CustomerSettingsDao is the data access object for table customer_settings.
type CustomerSettingsDao struct {
	table   string                  // table is the underlying table name of the DAO.
	group   string                  // group is the database configuration group name of current DAO.
	columns CustomerSettingsColumns // columns contains all the column names of Table for convenient usage.
}

// CustomerSettingsColumns defines and stores column names for table customer_settings.
type CustomerSettingsColumns struct {
	Id                     string //
	CustomerId             string //
	Module                 string // 开启的后台模块,按菜单分
	MaxAdminAmount         string // 可创建最大管理员数量
	MaxUserAmount          string // 最大用户数量
	IsOpenSelect           string // 是否开启选餐
	NextWeekCloseDay       string // 下周订单截至星期几(0-6)
	NextWeekCloseTime      string // 下周订单截至时间
	OrderPrepareTime       string // 次日订单准备时间（订单由已提交=》准备中 那天的变化时间）
	OrderPrepareDays       string // 订单准备天数
	OrderFinishTime        string //
	IsOpenMpServer         string // 是否开启小程序客服功能
	IsLogMpServerMessage   string // 是否开启客服消息记录
	SettleDay              string // 结算时间,T+几
	SettleRate             string // 结算费率(千分之几)
	SettleBank             string // 结算银行
	SettleAccount          string // 结算银行账号
	SettleAccountName      string // 结算银行账号开户名
	PaymentMethod          string // 支付方式：1：微信支付
	DefaultMealCover       string // 默认套餐封面
	AutoTypes              string // 自动订餐可选用的套餐类型
	AddOrderType           string // 加单类型：正常加单、次日加单
	MaxCloudUserAmount     string // 可创建最大云数据账号数量
	WeappFooter            string // 小程序首页底部说明
	ChatOpen               string // 客服系统权限
	NextDayAddTime         string // 次日加单时间
	IsUserFreezingStudents string // 是否允许用户冻结学生
	IsUserChangeMenu       string // 是否允许客户更换套餐
	IsMaintenance          string // 是否开启维护模式
	IsShowAllergen         string // 是否允许显示过敏源
	IsNuclein              string // 小程序是否显示员工核酸结果
	IsPicture              string // 小程序是否显示员工健康证
	IsAllowAutoSetting     string // 小程序是否允许用户更改自动订餐（1 是 0 否）
	IsUserCancelStudents   string // 是否允许用户注销学生
	IsFeedback             string // 小程序是否显示反馈意见(1 是 0 否)
	FeedbackNickname       string // 反馈意见回复昵称
	IsRollbackCancel       string // 是否允许用户取消请假
}

//  customerSettingsColumns holds the columns for table customer_settings.
var customerSettingsColumns = CustomerSettingsColumns{
	Id:                     "id",
	CustomerId:             "customer_id",
	Module:                 "module",
	MaxAdminAmount:         "max_admin_amount",
	MaxUserAmount:          "max_user_amount",
	IsOpenSelect:           "is_open_select",
	NextWeekCloseDay:       "next_week_close_day",
	NextWeekCloseTime:      "next_week_close_time",
	OrderPrepareTime:       "order_prepare_time",
	OrderPrepareDays:       "order_prepare_days",
	OrderFinishTime:        "order_finish_time",
	IsOpenMpServer:         "is_open_mp_server",
	IsLogMpServerMessage:   "is_log_mp_server_message",
	SettleDay:              "settle_day",
	SettleRate:             "settle_rate",
	SettleBank:             "settle_bank",
	SettleAccount:          "settle_account",
	SettleAccountName:      "settle_account_name",
	PaymentMethod:          "payment_method",
	DefaultMealCover:       "default_meal_cover",
	AutoTypes:              "auto_types",
	AddOrderType:           "add_order_type",
	MaxCloudUserAmount:     "max_cloud_user_amount",
	WeappFooter:            "weapp_footer",
	ChatOpen:               "chat_open",
	NextDayAddTime:         "next_day_add_time",
	IsUserFreezingStudents: "is_user_freezing_students",
	IsUserChangeMenu:       "is_user_change_menu",
	IsMaintenance:          "is_maintenance",
	IsShowAllergen:         "is_show_allergen",
	IsNuclein:              "is_nuclein",
	IsPicture:              "is_picture",
	IsAllowAutoSetting:     "is_allow_auto_setting",
	IsUserCancelStudents:   "is_user_cancel_students",
	IsFeedback:             "is_feedback",
	FeedbackNickname:       "feedback_nickname",
	IsRollbackCancel:       "is_rollback_cancel",
}

// NewCustomerSettingsDao creates and returns a new DAO object for table data access.
func NewCustomerSettingsDao() *CustomerSettingsDao {
	return &CustomerSettingsDao{
		group:   "default",
		table:   "customer_settings",
		columns: customerSettingsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CustomerSettingsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CustomerSettingsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CustomerSettingsDao) Columns() CustomerSettingsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CustomerSettingsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CustomerSettingsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CustomerSettingsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
